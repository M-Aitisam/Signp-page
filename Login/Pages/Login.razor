@page "/login"
@inject NavigationManager Navigation
@inject Dal.LoginDal loginDal

<!-- Main Container -->
<div class="login-container">
    <!-- Header -->
    <header class="login-header">
        <h1>Login</h1>
        <p>Access your account</p>
    </header>

    <!-- Login Form -->
    <div class="login-form-container">
        <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Username:</label>
                <InputText id="username" class="form-control" @bind-Value="user.Username" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" class="form-control" @bind-Value="user.Password" type="password" />
            </div>

            <button type="submit" class="submit-button">Login</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
        </EditForm>
    </div>
</div>

<!-- Inline CSS for Styling and Animation -->
<style>
    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        padding: 20px;
        color: #fff;
        font-family: 'Arial', sans-serif;
        animation: fadeIn 1s ease-in-out;
    }

    .login-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .login-header h1 {
        font-size: 2.5rem;
        margin: 0;
    }

    .login-header p {
        font-size: 1.2rem;
        margin: 0;
    }

    .login-form-container {
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        animation: slideIn 0.5s ease-out;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        font-weight: bold;
        margin-bottom: 5px;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        border-color: #2575fc;
        outline: none;
    }

    .submit-button {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 4px;
        background-color: #2575fc;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .submit-button:hover {
        background-color: #6a11cb;
    }

    .alert-danger {
        margin-top: 15px;
        padding: 10px;
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        font-size: 0.9rem;
    }

    /* Animations */
  
</style>

@code {
    private Model.LoginModel user = new Model.LoginModel();
    private string? errorMessage;

    private void HandleValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(user.Username) && !string.IsNullOrWhiteSpace(user.Password))
        {
            var loggedInUser = loginDal.LoginUser(user.Username, user.Password);
            if (loggedInUser != null)
            {
                Navigation.NavigateTo("/index");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        else
        {
            errorMessage = "Username and password are required.";
        }
    }
}
